name: Test

on:
  push:
    branches:
      - "main"
  pull_request:

jobs:
  test:
    name: Tests PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    concurrency:
      group: flow-test-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        php: ["8.1"]
        composer: ["v2"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: pcov
          tools: composer:${{ matrix.composer }}

      # Setting up composer dependencies
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Restore Composer Cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader --no-suggest

      # Setting up NPM dependencies
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: NPM Build
        run: |
          npm ci
          npm run production --no-progress
          cat public/mix-manifest.json # See asset versions in log

      - name: Copy Env
        run: cp .env.example .env

      - name: Cache Docker Images
        uses: ScribeMD/docker-cache@0.1.2
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('docker-compose.yml', '.env.example') }}

      - name: Build and Start Containers
        run: ./vendor/bin/sail up -d

      - name: Generate Application Key
        run: ./vendor/bin/sail artisan key:generate

      - name: Migrate Database
        run: ./vendor/bin/sail artisan migrate

      - name: Run Tests
        run: ./vendor/bin/sail artisan test

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main')
    needs: [ test ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Extract short commit hash
        run: |
          echo "::set-env name=COMMIT::$(echo ${GITHUB_SHA} | cut -c1-7)"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Extract tag
        run: |
          echo "::set-env name=TAG::$(git describe --tags --abbrev=0)"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Set deployment variables
        uses: allenevans/set-env@v2.0.0
        with:
          APP_URL: https://ecfmp.vatsim.net
          APPLICATION_ROOT: ${{ secrets.APPLICATION_ROOT }}
          RELEASE_DIRECTORY: ${{ secrets.APPLICATION_ROOT }}/releases/${{ env.COMMIT }}
          SHARED_DIRECTORY: ${{ secrets.APPLICATION_ROOT }}/shared
          PHP_PATH: /usr/bin/php
          VERSIONS_TO_KEEP: 5

      - name: GitHub Deployment
        uses: chrnorm/deployment-action@releases/v1
        id: github_deployment
        with:
          token: ${{ github.token }}
          target_url: https://ecfmp.vatsim.net
          environment: production
          ref: ${{ COMMIT }}

      # Everything to do with Yarn
      - name: Setup Yarn
        uses: actions/setup-node@v1
        with:
          node-version: '16'

      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore Yarn Cache
        uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Yarn Install
        run: yarn

      - name: Yarn Run
        run: yarn run prod

      - name: Remove node_modules
        run: 'rm -rf node_modules'

      # Actually do the deploy
      - name: Deploy application
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "."
          target: ${{ env.RELEASE_DIRECTORY }}

      - name: Env and Composer
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER}}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd $RELEASE_DIRECTORY
            ln -s $APPLICATION_ROOT/.env .env
            $PHP_PATH /usr/local/bin/composer install --no-interaction --no-dev
          envs: RELEASE_DIRECTORY,APPLICATION_ROOT,TAG,PHP_PATH

      - name: Update Symlinks
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER}}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            if [ ! -d "$SHARED_DIRECTORY/storage" ]; then
              mkdir -p $SHARED_DIRECTORY/storage
              mv $RELEASE_DIRECTORY/storage/* $SHARED_DIRECTORY/storage/
              chmod -R 775 $SHARED_DIRECTORY/storage
            fi
            
            rm -rf $RELEASE_DIRECTORY/storage
            ln -s $SHARED_DIRECTORY/storage $RELEASE_DIRECTORY/storage
            chmod -R u+rwX,g+rwX,o-rwx $RELEASE_DIRECTORY
            ln -sfn $RELEASE_DIRECTORY $APPLICATION_ROOT/current
          envs: RELEASE_DIRECTORY,SHARED_DIRECTORY,APPLICATION_ROOT

      - name: Migrate and Optimise
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER}}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd $RELEASE_DIRECTORY
            $PHP_PATH artisan down
            $PHP_PATH artisan migrate --step --force -n
            $PHP_PATH artisan optimize
            $PHP_PATH artisan storage:link
            mv storage/logs/laravel.log storage/logs/laravel.log.`date +%s`; true
            $PHP_PATH artisan up
          envs: RELEASE_DIRECTORY,PHP_PATH,GITHUB_REPOSITORY

      # Github deployment status
      - name: Deployment Failed
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          target_url: https://ecfmp.vatsim.net
          state: "failure"
          deployment_id: ${{ steps.github_deployment.outputs.deployment_id }}

      - name: Deployment Succeeded
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          target_url: https://ecfmp.vatsim.net
          state: "success"
          deployment_id: ${{ steps.github_deployment.outputs.deployment_id }}
